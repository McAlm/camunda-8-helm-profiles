# ------------------------------------
# Set the following for your specific environment
# Already have a Cluster? Set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster

#project ?= camunda-researchanddevelopment
project ?= YOUR_GCP_PROJECT
#region ?= us-east1-b # see: https://cloud.withgoogle.com/region-picker/
region ?= YOUR_GCP_REGION
clusterName ?= YOUR_CLUSTER_NAME

machineType ?= n1-standard-16
minSize ?= 1
maxSize ?= 6
certEmail ?= david.paroulek@camunda.com

# Configure the fully qualified domain name
# The dnsLabel is the first part of the domain address. It will be used no matter what baseDomain you configure below
dnsLabel ?= YOUR_DNS_LABEL

# By default, we'll use nip.io (See more at [https://nip.io](http://nip.io) )
# The fully qualified domain name will look something like <dnsLabel>.<ip address>.nip.io
baseDomainName ?= nip.io

# Another option is to replace baseDomainName with your own domain name
# In this case, the fully qualified domain name will look like <dnsLabel>.<baseDomainName>
# baseDomainName ?= YOUR_CUSTOM_DOMAIN_NAME

# Only used for oauth2-proxy
# clientSecret ?= CLIENT_SECRET

# ------------------------------------
# Camunda Enterprise Docker Registry Login

camundaDockerRegistrySecretName ?= camunda-docker-registry
camundaDockerRegistryUrl ?= registry.camunda.cloud
camundaDockerRegistryUsername ?= YOUR_EE_USERNAME
camundaDockerRegistryPassword ?= YOUR_EE_PASSWORD
camundaDockerRegistryEmail ?= YOUR_EE_EMAIL

# ------------------------------------
# The following variables should not be changed except for advanced use cases

ifeq ($(OS),Windows_NT)
    root ?= $(CURDIR)/../../../..
else
    root ?= $(shell pwd)/../../../..
endif

# Camunda components will be installed into the following Kubernetes namespace
namespace ?= camunda
# Helm release name
release ?= camunda
# Helm chart coordinates for Camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-nginx-all.yaml

.PHONY: all
all: ingress-nginx cert-manager letsencrypt-prod camunda-values-nginx-all.yaml create-docker-registry-secret camunda annotate-ingress-tls external-urls

# 0 kube from cluster.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-gke metrics

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 create nginx ingress controller with dns and tls

# 4 create camunda-values-all.yaml

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to nginx

# 7 Show external URLs
.PHONY: external-urls
external-urls: external-urls-all

# Test zeebe gateway
.PHONY: zeebe-status
zeebe-status: fqdn zeebe-password
	zbctl status --address $(fqdn):443 --clientId zeebe --clientSecret $(kcPassword) --authzUrl https://$(fqdn):443/auth/realms/camunda-platform/protocol/openid-connect/token

# Getting url for grafana is vendor specific
.PHONY: url-grafana
url-grafana:
	@echo "http://`kubectl get svc metrics-grafana-loadbalancer -n default -o 'custom-columns=ip:status.loadBalancer.ingress[0].ip' | tail -n 1`/d/zeebe-dashboard/zeebe?var-namespace=$(namespace)"

.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager delete-cloud-dns
	rm -f $(chartValues)

.PHONY: clean-kube
clean-kube: clean-metrics clean-kube-gke

include $(root)/google/include/kubernetes-gke.mk
include $(root)/include/camunda.mk
include $(root)/bpmn/deploy-models.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/metrics/metrics.mk
include $(root)/echo-server/echo.mk
include $(root)/oauth2-proxy/oauth2.mk
include $(root)/operate/include/operate.mk
include $(root)/tasklist/include/tasklist.mk
include $(root)/kibana/kibana.mk

